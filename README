Ahmad Hawamdah
03/03/2020


In this program, implementation of a Graph ADT and associated algorithms Minimum Weight Spanning Trees in C. The adjacency list representation of a graph consists of an array of Lists. Each List corresponds to a vertex in the graph and gives the neighbors of that vertex.


Graph functions:
newGraph();
Returns a reference to a new Graph object in the zero state.


freeGraph()
Frees heap memory associated with *pN, sets *pN to NULL.

Access functions:
getOrder()
Returns the order of the graph "vertices count"

getSize()
Returns the size of the graph "edges count"



Manipulation procedures:

addEdge()
Adds vertices to the graph through adjacency lists for an undirected graph

addArc()
Adds vertices to the graph through adjacency lists for an directed graph

Kruskal()
A function that finds the minimum weight spanning tree in a graph
G by sorting the weights on the edges, detecting cycles, and unifying edges accordingly. 

 
Other operations:
printGraph()
Prints an adjacency list representation of N to filestream out.

List functions:
newList()
Creates and returns a new empty List.

freeList();
Frees all heap memory associated with *pL, and sets *pL to NULL.

Access functions:
length()
Returns the number of elements in L.

index()
Returns index of cursor element if defined, -1 otherwise.

front()
Returns front element of L. Pre: length()>0

back()
Returns back element of L. Pre: length()>0

get()
Returns cursor element of L. Pre: length()>0, index()>=0

isEmpty()
checks if a list is empty

getData()
Returns true (1) iff Lists A and B are in same
state, and returns false (0) otherwise.

Manipulation procedures:
clear()
Resets L to its original empty state.

moveFront()
If L is non-empty, sets cursor under the front element, otherwise does nothing.

moveBack()
If L is non-empty, sets cursor under the back element, otherwise does nothing.

movePrev()
If cursor is defined and not at front, move cursor one step toward the front of L; if cursor is defined and at front, cursor becomes undefined; if cursor is undefined do nothing

moveNext()
If cursor is defined and not at back, move cursor one step toward the back of L; if cursor is defined and at back, cursor becomes undefined; if cursor is undefined do nothing

prepend()
Insert new element into L. If L is non-empty, insertion takes place before front element.

append()
Insert new element into L. If L is non-empty, insertion takes place after back element.

insertBefore()
Insert new element before cursor. Pre: length()>0, index()>=0

insertAfter()
Insert new element after cursor. Pre: length()>0, index()>=0

void deleteFront()
Delete the front element. Pre: length()>0

void deleteBack()
Delete the back element. Pre: length()>0

void delete()
Delete cursor element, making cursor undefined. Pre: length()>0, index()>=0

copyList()
Returns a new List representing the same integer sequence as L. The cursor in the new list is undefined,
regardless of the state of the cursor in L. The state of L is unchanged.



